( hello-mouse.tal )

( devices )
|00 @System  [ &vector $2 &pad $6  &r $2 &g $2 &b $2 ]
|20 @Screen  [ &vector $2 &width $2 &height $2 &pad  $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|90 @Mouse [ &vector $2 &x $2 &y $2 &state $1 &pad $3 &scrollx $2 &scrolly $2 ]

( macros )
%HALF2 { #01 SFT2 }

( zero page )
|0000
@pointer [ &x $2 &y $2 ]

( init )
|100
    ( set system colors )
    #2ce9 .System/r DEO2
    #01c0 .System/g DEO2
    #2ce5 .System/b DEO2

    ( set mouse vector )
    ;on-mouse .Mouse/vector DEO2

BRK

@on-mouse ( -> )
    ;draw-pointer JSR2
    
    ( #0008 ( push initial x )
    .Screen/height DEI2 HALF2 ( push y )
    #ff ( push length of line )
    ;draw-horiz-line JSR2 ( call subroutine ) )
    ;draw-sprite JSR2
BRK
@draw-pointer
    ( set sprite address )
    ( ;square .Screen/addr DEO2 )
    ;pointer_icn .Screen/addr DEO2

    ( send pointer position to screen )
    .pointer/x LDZ2 .Screen/x DEO2
    .pointer/y LDZ2 .Screen/y DEO2

    ( .Mouse/x DEI2 .Screen/x DEO2
    .Mouse/y DEI2 .Screen/y DEO2 )

    ( clear sprite from foreground )
    #40 .Screen/sprite DEO

    ( update pointer position )
    .Mouse/x DEI2 DUP2 .pointer/x STZ2 .Screen/x DEO2
    .Mouse/y DEI2 DUP2 .pointer/y STZ2 .Screen/y DEO2
JMP2r

@draw-horiz-line ( x^ y^ length -- )
    ( beginning )
    ( ws: x^ y^ length / rs: )
    
    ( store length in return stack )
    STH ( ws: x^ y^ / rs: length )

    ( set initial coords )
    .Screen/y DEO2
    .Screen/x DEO2 
    ( ws: / rs: length )

    ( retreive length from return stack )
    STHr ( ws: length / rs: )

    ( initalize count )
    #00 ( ws: length 00 / rs: )

    &loop
        ( stash length and count )
        STH2 ( ws: / rs: length count ) ( using STH2 preserves ordering )

        ( draw pixel with color 2 )
        #02 .Screen/pixel DEO

        ( increment x )
        .Screen/x DEI2 INC2 .Screen/x DEO2

        ( retrieve length and count )
        STH2r ( ws: length count / rs: )

        ( increment count to get new count )
        INC ( ws: length count+1 / rs: )

        ( compare to continue looping or not )
        NEQk ( ws: length count flag / rs: )
        ,&loop JCN ( ws: length count / rs: )
    POP2 ( ws: / rs: )
JMP2r

@draw-sprite
    ( draw sprite with color 2 in foreground )
    #4a .Screen/sprite DEO 

    ( jump if any button pressed )
    .Mouse/state DEI ,&pressed JCN

    ( draw sprite using color 2 and 0 in bg )
    ( #02 .Screen/sprite DEO2 )
    BRK

    &pressed
    ( draw sprite using color 1 and 0 in bg )
    ;heart .Screen/addr DEO2
    #01 .Screen/sprite DEO
JMP2r
BRK

@square [ ff81 8181 8181 81ff ]
@heart [ 66ff ffff 7e3c 1800 ]
@pointer_icn [ 80c0 e0f0 f8e0 1000 ]